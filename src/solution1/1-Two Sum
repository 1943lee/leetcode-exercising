//1st ac
//复杂度O(2^n)
class Solution {
	public int[] twoSum(int[] nums, int target) {
		if(null == nums || nums.length < 2) {
			return null;
		}

		int[] outPuts = new int[2];

		for(int i = 0; i < nums.length - 1; i++) {
			for(int j = i + 1; j < nums.length; j++) {
				int a = nums[i];
				int b = nums[j];
				if(a + b == target) {
					outPuts[0] = i;
					outPuts[1] = j;
					break;
				}
			}

		}

		return outPuts;
	}
}

//2nd ac
//复杂度O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        if(null == nums || nums.length < 2) {
            return null;
        }

        int[] result = new int[2];

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();

        for(int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i])) {
                result[1] = i;
                result[0] = map.get(target - nums[i]);
                break;
            }
            map.put(nums[i], i);
        }

        return result;
    }
}

//二刷
//返回值从小到大
class Solution {
    public int[] twoSum(int[] nums, int target) {
        if(null==nums || nums.length<2) return null;

        int[] res = new int[2];
        Map<Integer,Integer> map = new HashMap<>();

        for(int i=nums.length-1;i>=0;i--) {
            if(map.containsKey(target-nums[i])) {
                res[0] = i;
                res[1] = map.get(target-nums[i]);
                break;
            }
            map.put(nums[i],i);
        }

        return res;
    }
}