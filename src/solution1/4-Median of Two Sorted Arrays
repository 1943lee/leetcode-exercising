// 求2个有序数组的中间值，即所求值，在2个数组中的index同时满足在中间位置
// 先将2个数组合并，
class Solution {
    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
		int m = nums1.length;
		int n = nums2.length;

		//make sure m <= n,means j >= 0
		if(m > n) {
			return findMedianSortedArrays(nums2,nums1);
		}

		if(n == 0)
			return 0.0;

		int imin = 0;
		int imax = m;
		int half_len = (m + n + 1) / 2;

		while(imin <= imax) {
			int i = (imin + imax) / 2;
			int j = half_len - i;

			if( i < m && nums2[j-1] > nums1[i]) {
				imin = i + 1;
			}
			else if( i > 0 && nums1[i-1] > nums2[j]) {
				imax = i - 1;
			}
			else {
				int max_of_left = 0;
				int min_of_right = 0;

				if(i == 0) max_of_left = nums2[j-1];
				else if(j == 0) max_of_left = nums1[i-1];
				else max_of_left = Math.max(nums1[i-1],nums2[j-1]);

				//如果为奇数，不需要计算min_of_right
				if(((m + n) % 2) == 1) {
					return max_of_left;
				}

				if(i == m) min_of_right = nums2[j];
				else if(j == n) min_of_right = nums1[i];
				else min_of_right = Math.min(nums1[i],nums2[j]);

				return (max_of_left + min_of_right) / 2.0;
			}
		}

		return 0.0;
	}
}